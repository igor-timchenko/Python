–ü—Ä–∏–º–µ—Ä –±–æ—Ç–∞ —Å —Ç—Ä–µ–º—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á–∞—Ç-–ø–æ–¥–¥–µ—Ä–∂–∫–∞, –æ–ø—Ä–æ—Å—ã) —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ python-telegram-bot:
___________________________________________________________________________________________________________________
import logging
from telegram import (
    Update, 
    Poll, 
    ReplyKeyboardMarkup, 
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    PollAnswerHandler,
    filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
BOT_TOKEN = "–í–ê–®_TELEGRAM_BOT_TOKEN"
ADMIN_ID = 123456789  # –í–∞—à ID –≤ Telegram
SUPPORT_CHAT_ID = -1001234567890  # ID —á–∞—Ç–∞ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_context = {}
questions_db = [
    {"question": "–ö–∞–∫ —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å?", "answer": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?' –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ö–æ–¥–∞"},
    {"question": "–°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏", "answer": "–î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç 1-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è"},
    {"question": "–í–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞", "answer": "–í–æ–∑–≤—Ä–∞—Ç –≤–æ–∑–º–æ–∂–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏"}
]

# ===================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ =====================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    keyboard = [
        [KeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")],
        [KeyboardButton("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n"
             "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    await update.message.reply_text(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥\n"
        "/poll - —Å–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)\n"
        "/notify - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–∞–¥–º–∏–Ω)\n"
        "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (–∞–¥–º–∏–Ω)"
    )

# ===================== –°–ò–°–¢–ï–ú–ê –ü–û–î–î–ï–†–ñ–ö–ò =====================

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text
    chat_id = update.effective_chat.id
    
    # –û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    if text == "‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã":
        buttons = [
            [InlineKeyboardButton(q["question"], callback_data=f"faq_{i}")]
            for i, q in enumerate(questions_db)
        ]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
    # –ó–∞–ø—Ä–æ—Å —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
    elif text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π":
        user_context[chat_id] = {"awaiting_question": True}
        await update.message.reply_text(
            "–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –æ—Ç–≤–µ—Ç–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç."
        )
    # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
    elif user_context.get(chat_id, {}).get("awaiting_question"):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
        user_context[chat_id]["question"] = text
        user_context[chat_id]["awaiting_question"] = False
        
        # –ö–Ω–æ–ø–∫–∞ "–û—Ç–≤–µ—Ç–∏—Ç—å" –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        keyboard = [[InlineKeyboardButton("üìù –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{chat_id}")]]
        
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        await context.bot.send_message(
            chat_id=SUPPORT_CHAT_ID,
            text=f"‚ùì –í–æ–ø—Ä–æ—Å –æ—Ç {update.effective_user.full_name} (@{update.effective_user.username}):\n\n{text}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        await update.message.reply_text(
            "‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞."
        )
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
    else:
        await update.message.reply_text(
            "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ /help"
        )

async def faq_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –≤–æ–ø—Ä–æ—Å FAQ"""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞
    faq_index = int(query.data.split("_")[1])
    question = questions_db[faq_index]["question"]
    answer = questions_db[faq_index]["answer"]
    
    await query.edit_message_text(
        text=f"‚ùì –í–æ–ø—Ä–æ—Å: {question}\n\nüí° –û—Ç–≤–µ—Ç: {answer}"
    )

async def support_reply_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = int(query.data.split("_")[1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    context.user_data["replying_to"] = user_id
    await query.edit_message_text(
        text=f"‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:"
    )

# ===================== –û–ü–†–û–°–´ =====================

async def create_poll(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    # –°–æ–∑–¥–∞–µ–º –æ–ø—Ä–æ—Å
    question = "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º?"
    options = ["–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", "–ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é", "–†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é", "–†–µ–¥–∫–æ"]
    
    message = await context.bot.send_poll(
        chat_id=update.effective_chat.id,
        question=question,
        options=options,
        is_anonymous=False,
        allows_multiple_answers=False
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ–ø—Ä–æ—Å–∞ –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    context.user_data["poll_id"] = message.poll.id
    await update.message.reply_text(
        f"üìä –û–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω! ID: {message.poll.id}"
    )

async def handle_poll_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–ø—Ä–æ—Å"""
    answer = update.poll_answer
    user_id = answer.user.id
    
    logging.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –≤–∞—Ä–∏–∞–Ω—Ç(—ã): {answer.option_ids}"
    )

# ===================== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø =====================

async def send_notification(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–∞–¥–º–∏–Ω)"""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /notify –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        return
    
    notification_text = " ".join(context.args)
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–±–æ—Ä–∫–∞ –∏–∑ –ë–î
    user_ids = [123456789, 987654321]  # –ü—Ä–∏–º–µ—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    for user_id in user_ids:
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:\n\n{notification_text}"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {user_id}: {e}")
    
    await update.message.reply_text(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")

# ===================== –ê–î–ú–ò–ù-–°–¢–ê–¢–ò–°–¢–ò–ö–ê =====================

async def bot_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (–∞–¥–º–∏–Ω)"""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ –±–µ—Ä—É—Ç—Å—è –∏–∑ –ë–î
    stats_text = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
        "‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 150\n"
        "‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü: 42\n"
        "‚Ä¢ –ó–∞–¥–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: 78\n"
        "‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –æ–ø—Ä–æ—Å–æ–≤: 5"
    )
    
    await update.message.reply_text(stats_text)

# ===================== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====================

if __name__ == "__main__":
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    
    # –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(faq_callback, pattern="^faq_"))
    application.add_handler(CallbackQueryHandler(support_reply_callback, pattern="^reply_"))
    
    # –û–ø—Ä–æ—Å—ã
    application.add_handler(CommandHandler("poll", create_poll))
    application.add_handler(PollAnswerHandler(handle_poll_answer))
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    application.add_handler(CommandHandler("notify", send_notification))
    
    # –ê–¥–º–∏–Ω-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    application.add_handler(CommandHandler("stats", bot_stats))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()
___________________________________________________________________________________________________________

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:
-----------------------------------------------------------------------------------------------------------
–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:
–î–æ–±–∞–≤—å—Ç–µ SQLite/PostgreSQL –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è:
_____________________________________________________________________________________________________
import sqlite3
conn = sqlite3.connect('bot.db')
c = conn.cursor()
c.execute('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT)')
_____________________________________________________________________________________________________
–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é:
_____________________________________________________________________________________________________
import asyncio

async def scheduled_notification(context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(
        chat_id=ADMIN_ID, 
        text="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!"
    )

# –í main():
application.job_queue.run_daily(scheduled_notification, time=datetime.time(9, 0, 0))
_____________________________________________________________________________________________________
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ API:
_____________________________________________________________________________________________________
import requests

async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    response = requests.get("https://api.weather.com/...")
    await update.message.reply_text(f"–ü–æ–≥–æ–¥–∞: {response.json()['temp']}¬∞C")
_____________________________________________________________________________________________________
–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤:
_____________________________________________________________________________________________________
import csv

def log_question(user_id, question):
    with open('questions.csv', 'a') as f:
        writer = csv.writer(f)
        writer.writerow([datetime.now(), user_id, question])
