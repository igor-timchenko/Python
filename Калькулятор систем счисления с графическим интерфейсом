import tkinter as tk
from tkinter import ttk, messagebox
import re

class NumberSystemCalculator:
    def __init__(self, root):
        self.root = root
        self.root.title("Калькулятор систем счисления")
        self.root.geometry("600x500")
        self.root.resizable(True, True)
        
        # Цветовая схема
        self.bg_color = "#f0f0f0"
        self.button_color = "#4CAF50"
        self.result_color = "#E3F2FD"
        self.root.configure(bg=self.bg_color)
        
        self.create_widgets()
        
    def char_to_digit(self, char):
        """Преобразование символа в число"""
        if '0' <= char <= '9':
            return ord(char) - ord('0')
        elif 'A' <= char <= 'Z':
            return ord(char) - ord('A') + 10
        elif 'a' <= char <= 'z':
            return ord(char) - ord('a') + 10
        return -1

    def digit_to_char(self, digit):
        """Преобразование числа в символ"""
        if 0 <= digit < 10:
            return chr(ord('0') + digit)
        elif 10 <= digit < 36:
            return chr(ord('A') + digit - 10)
        return '?'

    def is_valid_digit(self, digit, base):
        """Проверка, является ли символ допустимым в данной системе счисления"""
        value = self.char_to_digit(digit)
        return 0 <= value < base if value != -1 else False

    def validate_number(self, number, base):
        """Проверка корректности числа в данной системе счисления"""
        if base < 2 or base > 36:
            return False
        
        start = 0
        if number and (number[0] == '-' or number[0] == '+'):
            start = 1
        
        if start >= len(number):  # Пустое число
            return False
        
        for i in range(start, len(number)):
            if not self.is_valid_digit(number[i], base):
                return False
        return True

    def to_decimal(self, number, base):
        """Перевод из любой системы счисления в десятичную"""
        if not number:
            return 0
        
        result = 0
        sign = 1
        start = 0
        
        if number[0] == '-':
            sign = -1
            start = 1
        elif number[0] == '+':
            start = 1
        
        for i in range(start, len(number)):
            digit = self.char_to_digit(number[i])
            if digit >= base or digit < 0:
                raise ValueError(f"Недопустимая цифра '{number[i]}' в системе счисления {base}")
            result = result * base + digit
        
        return result * sign

    def from_decimal(self, number, base):
        """Перевод из десятичной системы в любую другую"""
        if base < 2 or base > 36:
            return "Ошибка: недопустимая система счисления"
        
        if number == 0:
            return "0"
        
        sign = 1
        if number < 0:
            sign = -1
            number = -number
        
        digits = []
        while number > 0:
            digits.append(self.digit_to_char(number % base))
            number //= base
        
        result = ''.join(reversed(digits))
        return ('-' + result) if sign == -1 else result

    class Token:
        """Класс для хранения токена"""
        def __init__(self, value, token_type, number="", base=0):
            self.value = value
            self.type = token_type
            self.number = number
            self.base = base
            self.decimal_value = 0

    class TokenType:
        """Типы токенов"""
        NUMBER = "NUMBER"
        OPERATOR = "OPERATOR"

    def get_priority(self, operator):
        """Получение приоритета оператора"""
        if operator in ['+', '-']:
            return 1
        elif operator in ['*', '/', '//', '%']:
            return 2
        return 0

    def parse_expression(self, expression):
        """Парсинг сложного выражения"""
        tokens = []
        i = 0
        
        while i < len(expression):
            if expression[i].isspace():
                i += 1
                continue
                
            # Проверяем операторы
            if expression[i] in ['+', '-', '*', '/', '%']:
                if expression[i] == '/' and i + 1 < len(expression) and expression[i+1] == '/':
                    tokens.append(self.Token('//', self.TokenType.OPERATOR))
                    i += 2
                else:
                    tokens.append(self.Token(expression[i], self.TokenType.OPERATOR))
                    i += 1
            else:
                # Считываем число с основанием
                num_start = i
                # Ищем открывающую скобку
                open_paren = -1
                for j in range(i, len(expression)):
                    if expression[j] == '(':
                        open_paren = j
                        break
                
                if open_paren != -1:
                    number = expression[num_start:open_paren]
                    # Ищем закрывающую скобку
                    close_paren = -1
                    for j in range(open_paren + 1, len(expression)):
                        if expression[j] == ')':
                            close_paren = j
                            break
                    
                    if close_paren != -1:
                        base_str = expression[open_paren+1:close_paren]
                        try:
                            base = int(base_str)
                            if self.validate_number(number, base):
                                tokens.append(self.Token(f"{number}({base})", self.TokenType.NUMBER, number, base))
                                i = close_paren + 1
                            else:
                                messagebox.showerror("Ошибка", f"Число '{number}' недопустимо в системе счисления {base}")
                                return None
                        except ValueError:
                            messagebox.showerror("Ошибка", f"Некорректная система счисления '{base_str}'")
                            return None
                    else:
                        messagebox.showerror("Ошибка", "Не найдена закрывающая скобка")
                        return None
                else:
                    messagebox.showerror("Ошибка", "Неверный формат. Используйте формат: число(основание)")
                    return None
        
        return tokens

    def evaluate_expression(self, tokens, result_base):
        """Вычисление выражения с учетом приоритетов операторов"""
        try:
            # Алгоритм сортировочной станции (Shunting Yard) для преобразования в ОПЗ
            output_queue = []
            operator_stack = []
            
            for token in tokens:
                if token.type == self.TokenType.NUMBER:
                    output_queue.append(token)
                elif token.type == self.TokenType.OPERATOR:
                    while (operator_stack and 
                           operator_stack[-1].value != '(' and
                           self.get_priority(operator_stack[-1].value) >= self.get_priority(token.value)):
                        output_queue.append(operator_stack.pop())
                    operator_stack.append(token)
            
            # Переносим оставшиеся операторы в очередь
            while operator_stack:
                output_queue.append(operator_stack.pop())
            
            # Вычисление ОПЗ
            stack = []
            for token in output_queue:
                if token.type == self.TokenType.NUMBER:
                    token.decimal_value = self.to_decimal(token.number, token.base)
                    stack.append(token)
                elif token.type == self.TokenType.OPERATOR:
                    if len(stack) < 2:
                        return "Ошибка: недостаточно операндов"
                    
                    b = stack.pop()
                    a = stack.pop()
                    
                    # Выполняем операцию
                    a_val = a.decimal_value
                    b_val = b.decimal_value
                    
                    if token.value == '+':
                        result_val = a_val + b_val
                    elif token.value == '-':
                        result_val = a_val - b_val
                    elif token.value == '*':
                        result_val = a_val * b_val
                    elif token.value == '/':
                        if b_val == 0:
                            return "Ошибка: деление на ноль"
                        result_val = int(a_val / b_val)
                    elif token.value == '//':
                        if b_val == 0:
                            return "Ошибка: деление на ноль"
                        result_val = a_val // b_val
                    elif token.value == '%':
                        if b_val == 0:
                            return "Ошибка: деление на ноль"
                        result_val = a_val % b_val
                    else:
                        return f"Ошибка: неизвестный оператор '{token.value}'"
                    
                    # Создаем временный объект для результата
                    temp_obj = self.Token("0", self.TokenType.NUMBER, "0", 10)
                    temp_obj.decimal_value = result_val
                    stack.append(temp_obj)
            
            if len(stack) != 1:
                return "Ошибка: некорректное выражение"
            
            final_result = stack[0].decimal_value
            return self.from_decimal(final_result, result_base)
            
        except Exception as e:
            return f"Ошибка при вычислении: {str(e)}"

    def calculate(self):
        """Основная функция вычисления"""
        expression = self.expression_entry.get().strip()
        result_base_str = self.result_base_entry.get().strip()
        
        if not expression:
            messagebox.showerror("Ошибка", "Введите выражение")
            return
            
        if not result_base_str:
            messagebox.showerror("Ошибка", "Введите систему счисления для результата")
            return
            
        try:
            result_base = int(result_base_str)
            if result_base < 2 or result_base > 36:
                messagebox.showerror("Ошибка", "Система счисления должна быть от 2 до 36")
                return
                
            tokens = self.parse_expression(expression)
            if tokens is not None:
                result = self.evaluate_expression(tokens, result_base)
                self.result_text.delete(1.0, tk.END)
                self.result_text.insert(1.0, f"{result}({result_base})")
            else:
                self.result_text.delete(1.0, tk.END)
                self.result_text.insert(1.0, "Ошибка в выражении")
                
        except ValueError:
            messagebox.showerror("Ошибка", "Некорректная система счисления")
        except Exception as e:
            messagebox.showerror("Ошибка", f"Произошла ошибка: {str(e)}")

    def clear_all(self):
        """Очистка всех полей"""
        self.expression_entry.delete(0, tk.END)
        self.result_base_entry.delete(0, tk.END)
        self.result_base_entry.insert(0, "10")
        self.result_text.delete(1.0, tk.END)

    def create_widgets(self):
        """Создание виджетов интерфейса"""
        # Заголовок
        title_label = tk.Label(
            self.root, 
            text="Калькулятор систем счисления", 
            font=("Arial", 16, "bold"),
            bg=self.bg_color,
            fg="#2196F3"
        )
        title_label.pack(pady=10)
        
        # Основной фрейм
        main_frame = tk.Frame(self.root, bg=self.bg_color)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # Фрейм для ввода выражения
        expr_frame = tk.Frame(main_frame, bg=self.bg_color)
        expr_frame.pack(fill=tk.X, pady=5)
        
        tk.Label(
            expr_frame, 
            text="Введите выражение:", 
            font=("Arial", 12, "bold"),
            bg=self.bg_color
        ).pack(anchor=tk.W)
        
        self.expression_entry = tk.Entry(
            expr_frame, 
            font=("Arial", 12),
            width=50
        )
        self.expression_entry.pack(fill=tk.X, pady=5)
        self.expression_entry.insert(0, "1010(2)+F(16)*15(10)")
        
        # Фрейм для системы счисления результата
        base_frame = tk.Frame(main_frame, bg=self.bg_color)
        base_frame.pack(fill=tk.X, pady=5)
        
        tk.Label(
            base_frame, 
            text="Система счисления результата (2-36):", 
            font=("Arial", 12, "bold"),
            bg=self.bg_color
        ).pack(anchor=tk.W)
        
        self.result_base_entry = tk.Entry(
            base_frame, 
            font=("Arial", 12),
            width=10
        )
        self.result_base_entry.pack(anchor=tk.W, pady=5)
        self.result_base_entry.insert(0, "10")
        
        # Фрейм для кнопок
        button_frame = tk.Frame(main_frame, bg=self.bg_color)
        button_frame.pack(fill=tk.X, pady=10)
        
        calculate_button = tk.Button(
            button_frame,
            text="Вычислить",
            font=("Arial", 12, "bold"),
            bg=self.button_color,
            fg="white",
            command=self.calculate,
            padx=20,
            pady=5
        )
        calculate_button.pack(side=tk.LEFT, padx=5)
        
        clear_button = tk.Button(
            button_frame,
            text="Очистить",
            font=("Arial", 12, "bold"),
            bg="#f44336",
            fg="white",
            command=self.clear_all,
            padx=20,
            pady=5
        )
        clear_button.pack(side=tk.LEFT, padx=5)
        
        # Фрейм для результата
        result_frame = tk.Frame(main_frame, bg=self.bg_color)
        result_frame.pack(fill=tk.BOTH, expand=True, pady=5)
        
        tk.Label(
            result_frame, 
            text="Результат:", 
            font=("Arial", 12, "bold"),
            bg=self.bg_color
        ).pack(anchor=tk.W)
        
        self.result_text = tk.Text(
            result_frame,
            font=("Arial", 14, "bold"),
            height=3,
            bg=self.result_color,
            fg="#1976D2"
        )
        self.result_text.pack(fill=tk.BOTH, expand=True, pady=5)
        
        # Фрейм для примеров
        examples_frame = tk.Frame(main_frame, bg=self.bg_color)
        examples_frame.pack(fill=tk.X, pady=10)
        
        tk.Label(
            examples_frame, 
            text="Примеры использования:", 
            font=("Arial", 11, "bold"),
            bg=self.bg_color
        ).pack(anchor=tk.W)
        
        examples = tk.Text(
            examples_frame,
            font=("Arial", 10),
            height=6,
            bg="#E8F5E9"
        )
        examples.pack(fill=tk.X, pady=5)
        
        examples_text = """• 1010(2)+F(16)           → сложение
• 100(10)%7(10)           → остаток от деления
• A(16)*15(10)-5(10)      → сложное выражение
• 1000(10)//3(10)         → целочисленное деление
• 101(2)+17(8)*F(16)      → комбинированное выражение"""
        
        examples.insert(1.0, examples_text)
        examples.config(state=tk.DISABLED)

def main():
    root = tk.Tk()
    app = NumberSystemCalculator(root)
    root.mainloop()

if __name__ == "__main__":
    main()
